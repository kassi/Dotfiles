## Git featured prompt functions

declare git_branch

function __git_branch {
    if [ -z "$git_branch" ]; then
        local branch="$(git symbolic-ref HEAD 2>/dev/null)"
        git_branch=${branch##refs/heads/}
    fi
    echo $git_branch
}

function _git_branch_fmt
{
    local format="$1"
    if [ -z "$format" ]; then format=" [%s]"; fi
    printf "$format" "$(__git_branch)"
}

function _git_remote_fmt
{
    local format="$1"
    if [ -z "$format" ]; then format=" [%s]"; fi
    local remote="$(git remote -v show 2>/dev/null | grep "(push)" | awk '{print $1" "$2}')";
    if [ -n "$remote" ]; then
        printf "$format" "$remote";
    fi
}

function _git_stashes
{
    local format="$1"
    if [ -z "$format" ]; then format=" [%s]"; fi
    local stashes="$(git stash list | grep "WIP on $(__git_branch)" | perl -ne '{m/^stash(\@\{\d+\})/ && push @a, $1} END {print join (" ",@a)}' 2>/dev/null)";
    printf "$format" "$stashes";
}

##

## Development helpers

function ci {
  command="$*"
  filename="/tmp/ci-$RANDOM-$$"

  if [ "$1" == "rails" -a "$2" == "new" -a -n "$3" ]; then
    echo "Initialize new rails app" > $filename
    echo >> $filename
    echo "Command:" >> $filename
    echo "    $command" >> $filename
    $command && cd "$3" && git init && git add . && git commit -a -F $filename
    if [ -n "$EDITOR" ]; then
      $EDITOR . Gemfile
    fi
  else
    echo > $filename
    echo >> $filename
    echo "Command:" >> $filename
    echo "    $command" >> $filename

    $command && git add . && git commit -a -t $filename && s -a $(git show --name-only --pretty="format:")
  fi

}

function remove_app {
    if [[ -z "$1" ]]; then echo -e "Usage:\n\tremove_app <app-path>"; return; fi
    if [ ! -d "$1" ]; then echo "Path not found: $1"; return; fi
    if [ ! -f "$1/Gemfile" ]; then echo "Doesn't look like a rails app"; return; fi
    path="$1"
    app=${path/%\/} # remove trailing /
    app=${app##*\/} # strip all leading paths
    db=${app//./_}  # . -> _
    mysql -uroot -e "drop database if exists ${db}_development; drop database if exists ${db}_test"
    rm -rf $path
}

## Perl related functions

function perledit {
    file=`perl -e '$x=$ARGV[0]; $x =~ s/::/\//g; $x .= ".pm"; eval { require "$x"; }; if( exists $INC{$x} ) { printf "%s\n", $INC{$x}; }' $1`
    if [[ -z "$file" ]]; then echo "can't determine location of mocule $1";
    else
        $EDITOR "$file"
    fi
}

function perlpath
{
    if [[ -z "$1" ]]; then echo -e "Usage:\n\tperlpath My::Package";
    else
        perl -MFile::Basename -e '$x=$ARGV[0]; $x =~ s/::/\//g; $x .= ".pm"; eval { require "$x"; }; if( exists $INC{$x} ) { printf "%s\n", dirname($INC{$x}); }' $1
    fi
}

function perlver
{
    if [[ -z "$1" ]]; then echo -e "Usage:\n\tperlver My::Package";
    else
        perl -e '$x=$ARGV[0]; $x =~ s/::/\//g; $x .= ".pm"; eval { require "$x"; }; if( exists $INC{$x} ) { printf "%s version %s installed\n%s\n", $ARGV[0], ${"$ARGV[0]\::VERSION"}, $INC{$x}; } else { warn "$ARGV[0] is not installed\n"; }' $1
    fi
}

function perlwhereis
{
    if [[ -z "$1" ]]; then echo -e "Usage:\n\tperlver My::Package";
    else
        perl -e '$x=$ARGV[0]; $x =~ s/::/\//g; $x .= ".pm"; eval { require "$x"; }; if( exists $INC{$x} ) { printf "%s\n", $INC{$x}; }' $1
    fi
}

## General program starters

function gpgverify
{
    find . -maxdepth 1 \( -name '*.asc' -or -name '*.sig' -or -name '*.sign' \) -exec gpg {} \;
}

function prolog {
    local run=$(head -1 "$1")
    bash -c "${run##%\!}"
}

function xslt {
    if [[ -z "$2" ]]; then echo -e "Usage:\n\txslt <xsl-file> <xml-file> [output-file]";
    else
        o=""
        if [[ -n "$3" ]]; then o="-o:$3"; fi
        saxon='java -jar /Applications/Developer/saxonb9-1-0-8j/saxon9.jar'
        $saxon -s:$2 -xsl:$1 $o
    fi
}

function get_my_ip {
    nslookup kassi.spdns.de | perl -ne 'm/Address: (\S+)/ && print "$1\n"'
}
